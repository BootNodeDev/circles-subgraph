type Token @entity {
  id: ID! # The address of the token
  owner: Safe!
}

type User @entity {
  id: ID! # The address of the user
  safes: [Safe!]!
  safeAddresses: [String!]
}

type Safe @entity {
  id: ID! # The address of the safe
  owners: [User!]! @derivedFrom(field: "safes")
  outgoing: [Trust!]! @derivedFrom(field: "user")
  incoming: [Trust!]! @derivedFrom(field: "canSendTo")
  balances: [Balance!]! @derivedFrom(field: "owner")
}

type Balance @entity {
  id: ID! # Concatenation of token address and holder address
  amount: BigInt!
  owner: Safe!
  token: Token!
}

interface Event {
  id: ID! # Concatenation of block number and log ID
}

type Signup implements Event @entity {
  id: ID! # Concatenation of block number and log ID
  safe: String!
  token: String!
}

type Trust implements Event @entity {
  id: ID! # Concatenation of token address, user address and canSendTo address
  canSendToAddress: String!
  canSendTo: Safe
  userAddress: String!
  user: Safe
  limit: BigInt!
  limitPercentage: BigInt!
}

enum NotificationType {
  HUB_TRANSFER
  OWNERSHIP
  TRANSFER
  TRUST
}

type TrustChange implements Event @entity {
  id: ID! # Concatenation of block number and log ID
  canSendTo: String!
  user: String!
  limitPercentage: BigInt!
}

type Transfer implements Event @entity {
  id: ID! # Concatenation of block number and log ID
  from: String!
  to: String!
  amount: BigInt!
}

type HubTransfer implements Event @entity {
  id: ID! # Concatenation of block number and log ID
  from: String!
  to: String!
  amount: BigInt!
}

type OwnershipChange implements Event @entity {
  id: ID! # Concatenation of block number and log ID
  adds: String
  removes: String
}

type Notification implements Event @entity {
  id: ID! # Concatenation of notification type, block number and log ID
  safe: Safe
  safeAddress: String!
  type: NotificationType!
  time: BigInt!
  transactionHash: String!
  trust: TrustChange
  transfer: Transfer
  hubTransfer: HubTransfer
  ownership: OwnershipChange
}
